heat_template_version: 2014-10-16

description: >
   This template defines a Mesos Cluster that consist of: 
   a set of masters running also Marathon and Chronos Frameworks;
   a set of slaves;
   two Load Balancers with a Virtual IP.
   Service-discovery and load-balacing is implemented using Consul, dnsmasq,
   mesos-consul, marathon-consul and haproxy-consul

parameters:

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server

  network:
    type: string
    description: uuid/name of a network to use for ip addresses

  server_image:
    type: string
    default: "ubuntu-16.04"
    description: glance image used to boot the server

  master_flavor:
    type: string
    default: m1.medium
    description: flavor to use when booting the server

  number_of_masters:
    type: number
    description: how many mesos masters to spawn initially
    default: 1

  slave_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  number_of_slaves:
    type: number
    description: how many mesos slaves to spawn initially
    constraints:
      - range: { min: 2 }
    default: 4

  loadbalancer_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the loadbalancer server

  availability_zone:
    type: string
    default: nova
    description: where to create the cluster

  marathon_username:
    type: string
    description: username to access Marathon endpoint

  marathon_password:
    type: string
    description: password to access Marathon endpoint

  ams_default_squid_port:
    type: string
    default: 3128

  ams_default_squid:
    type: string
    default: cream-bdii.pg.infn.it

  ams_use_local_squid:
    type: boolean
    default: false
  
  number_of_wn_instances:
    type: number
    description: Number WN instances

  cpu_x_wn:
    type: number
    description: Number of vCPU for each WN
  
  ram_x_wn:
    type: number
    description: Amount of RAM for each WN
  
  docker_cpu_x_wn:
    type: number
    description: Amount of RAM for each WN in docker
  
  docker_ram_x_wn:
    type: number
    description: Amount of RAM for each WN in docker
  
  ams_repo_server_url:
    type: string

  ams_repo_public_key_path:
    type: string

  ams_repo_http_proxy:
    type: string

  ams_repo_repository_name:
    type: string

  ams_repo_public_key:
    type: string
  
  ams_repo_public_key_url:
    type: string
    default: ""



resources:
  ######################################################################
  #
  # security groups.  we need to permit network traffic of various
  # sorts.
  #

  secgroup_base:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          remote_mode: remote_group_id

  secgroup_mesos:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          port_range_min: 5050
          port_range_max: 5050
        - protocol: tcp
          port_range_min: 8443
          port_range_max: 8443
        - protocol: tcp
          port_range_min: 4443
          port_range_max: 4443

  # Required by  <slave>/monitoring/statisics.json resource
  secgroup_slaves:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          port_range_min: 5051
          port_range_max: 5051
  
  secgroup_condor:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          port_range_min: 9618
          port_range_max: 9618
        - protocol: tcp
          port_range_min: 9614
          port_range_max: 9614
        - protocol: tcp
          port_range_min: 5651
          port_range_max: 5651
        - protocol: tcp
          port_range_min: 5652
          port_range_max: 5652
        - protocol: tcp
          port_range_min: 5653
          port_range_max: 5653
        - protocol: tcp
          port_range_min: 5654
          port_range_max: 5654
  
  secgroup_schedd:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          port_range_min: 31042
          port_range_max: 31042

  secgroup_all_open:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp

  vip_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: network}
      security_groups:
        - get_resource: secgroup_all_open
      replacement_policy: AUTO

  #########
  # Common config
  ansible_setup_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: role_list
        type: CommaDelimitedList 
      config: { get_file: 'https://raw.githubusercontent.com/Cloud-PG/mesos-cluster/devel/heat-templates-v2/setup.sh' }


  ######################################################################
  #
  # Load Balancers SoftwareConfig.
  #
  loadbalancer_setup_deployment:
    type: OS::Heat::SoftwareDeployments
    properties:
      config: {get_resource: ansible_setup_config}
      servers: {get_attr: [loadbalancers, attributes, loadbalancer_id]}
      input_values: 
        role_list: "consul,keepalived,marathon-lb"
        #,gateway_config"

  loadbalancer_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: consul_servers
          type: CommaDelimitedList
        - name: keepalived_virtual_ip
      config: |
              ---
              - hosts: localhost
                vars:
                  docker_bridge_ip: "172.0.17.1"
                connection: local
                pre_tasks:
                  - name: Fix /etc/hosts
                    lineinfile: dest=/etc/hosts regexp='^127\.0\.1\.1' line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                  - name: Update /etc/hosts
                    lineinfile:  dest=/etc/hosts  line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                roles:
                  - { role: indigo-dc.consul, consul_mode: "agent"}
                  - { role: indigo-dc.marathon-lb }
                  - { role: indigo-dc.keepalived }
                  # - { role: Cloud-PG.gateway_config, availability_zone: {get_param: availability_zone} }

  loadbalancer_deployment:
    type: OS::Heat::SoftwareDeployments
    depends_on:
      - loadbalancer_setup_deployment
      - master_deployment
    properties:
      config: {get_resource: loadbalancer_config}
      servers: {get_attr: [loadbalancers, attributes, loadbalancer_id]}
      input_values:
        consul_servers: {get_attr: [mesos_masters, mesos_server_ip]}
        load_balancers_list: {get_attr: [loadbalancers, loadbalancer_ip]}
        keepalived_virtual_ip: {get_attr: [vip_port, fixed_ips, 0, ip_address]}
        marathon_lb_auth_creds: 
           list_join: 
             - ':'
             - - {get_param: marathon_username }
               - {get_param: marathon_password }
  

  loadbalancers:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: http://10.2.201.99/MircoT/mesos-condor-ams-cluster/raw/master/heat-templates/loadbalancer.yaml
        properties:
          server_name: lb%index%
          ssh_key_name: {get_param: ssh_key_name}
          server_image: {get_param: server_image}
          server_flavor: {get_param: loadbalancer_flavor}
          availability_zone: {get_param: availability_zone}
          network: {get_param: network}
          virtual_ip: {get_attr: [vip_port, fixed_ips, 0, ip_address]}
          security_groups:
              - {get_resource: secgroup_base}
              - {get_resource: secgroup_all_open}

  ######################################################################
  #
  # Master SoftwareConfig.
  #
  master_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: mesos_masters_list
          type: CommaDelimitedList
        - name: zookeeper_host_list
          type: CommaDelimitedList
        - name: zookeeper_peers
          type: CommaDelimitedList
        - name: consul_servers
        - name: marathon_username
        - name: marathon_password
        - name: ams_use_local_squid
        - name: ams_default_squid
        - name: ams_default_squid_port
        - name: htcondor_config_schedd_ip
        - name: ams_number_of_wn_instances
        - name: ams_number_of_slaves
        - name: ams_cpu_x_wn
        - name: ams_ram_x_wn
        - name: ams_docker_cpu_x_wn
        - name: ams_docker_ram_x_wn
      config: |
              ---
              - hosts: localhost
                vars:
                  docker_bridge_ip: "172.0.17.1"
                connection: local
                pre_tasks:
                  - name: Fix /etc/hosts
                    lineinfile: dest=/etc/hosts regexp='^127\.0\.1\.1' line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                  - name: Update /etc/hosts
                    lineinfile:  dest=/etc/hosts  line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                roles:
                  - { role: indigo-dc.consul, consul_mode: "server" }
                  - { role: indigo-dc.zookeeper }
                  - { role: indigo-dc.mesos, mesos_install_mode: "master" }
                  - { role: indigo-dc.marathon }
                  - { role: indigo-dc.htcondor_config, config_mode: "master", htcondor_config_schedd_ip: {get_attr: [mesos_slaveschedd, resource.0, mesos_server_ip]}, zookeeper_peers: {get_attr: [mesos_masters, mesos_server_ip]}, lb_peers: {get_attr: [vip_port, fixed_ips, 0, ip_address]} }
                  - { role: indigo-dc.ams_config, ams_config_node: "master", htcondor_config_schedd_ip: {get_attr: [mesos_slaveschedd, resource.0, mesos_server_ip]}, ams_use_local_squid: "{{ams_use_local_squid}}" }
                  # - { role: Cloud-PG.gateway_config, availability_zone: {get_param: availability_zone} }



  ######################################################################
  #
  # Master SoftwareDeployment.
  #
  master_setup_deployment:
    type: OS::Heat::SoftwareDeployments
    properties:
      config: {get_resource: ansible_setup_config}
      servers: {get_attr: [mesos_masters, attributes, mesos_server_id]}  
      input_values:
        role_list: "consul,zookeeper,mesos,marathon,htcondor_config,ams_config"
        #,gateway_config"

  master_deployment:
    type: OS::Heat::SoftwareDeployments
    depends_on:
      - master_setup_deployment
    properties:
      config: {get_resource: master_config}
      servers: {get_attr: [mesos_masters, attributes, mesos_server_id]}
      input_values:
        mesos_masters_list: {get_attr: [mesos_masters, mesos_server_ip]}
        ams_use_local_squid: {get_param: ams_use_local_squid}
        consul_servers: "{{mesos_masters_list}}"
        zookeeper_host_list: "{{mesos_masters_list}}"
        zookeeper_peers: "{{mesos_masters_list}}"
        marathon_username: {get_param: marathon_username}
        marathon_password: {get_param: marathon_password}
        htcondor_config_schedd_ip: {get_attr: [mesos_slaveschedd, resource.0, mesos_server_ip]}
        ams_default_squid: {get_param: ams_default_squid}
        ams_default_squid_port: {get_param: ams_default_squid_port}
        ams_number_of_wn_instances: {get_param: number_of_wn_instances}
        ams_number_of_slaves: {get_param: number_of_slaves}
        ams_cpu_x_wn: {get_param: cpu_x_wn}
        ams_ram_x_wn: {get_param: ram_x_wn}
        ams_docker_cpu_x_wn: {get_param: docker_cpu_x_wn}
        ams_docker_ram_x_wn: {get_param: docker_ram_x_wn}

  mesos_masters:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: number_of_masters}
      resource_def:
         type: http://10.2.201.99/MircoT/mesos-condor-ams-cluster/raw/master/heat-templates/mesosnode.yaml
         properties: 
            server_name: mesos-m%index%
            ssh_key_name: {get_param: ssh_key_name}
            server_image: {get_param: server_image}
            server_flavor: {get_param: master_flavor}
            availability_zone: {get_param: availability_zone}
            network: {get_param: network}
            security_groups:
              - {get_resource: secgroup_base}
              - {get_resource: secgroup_mesos}


  ######################################################################
  #
  # Mesos slaves. This is a resource group that will initially
  # create <number_of_slaves> slaves, and needs to be manually scaled.
  #
  slave_setup_deployment:
    type: OS::Heat::SoftwareDeployments
    properties:
      config: {get_resource: ansible_setup_config}
      servers: {get_attr: [mesos_slaves, attributes, mesos_server_id]}
      input_values:
        role_list: "docker,consul,mesos,htcondor_config,ams_config"
        #,gateway_config"

  slave_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: zookeeper_peers
          type: CommaDelimitedList
        - name: consul_servers
          type: CommaDelimitedList
        - name: mesos_masters_list
        - name: htcondor_config_schedd_ip
        - name: ams_use_local_squid
        - name: ams_default_squid
        - name: ams_default_squid_port
        - name: ams_repo_server_url
        - name: ams_repo_public_key_path
        - name: ams_repo_http_proxy
        - name: ams_repo_repository_name
        - name: ams_repo_public_key
        - name: ams_repo_public_key_url
      config: |
              ---
              - hosts: localhost
                vars:
                  docker_bridge_ip: "172.0.17.1"
                connection: local
                pre_tasks:
                  - name: Fix /etc/hosts
                    lineinfile: dest=/etc/hosts regexp='^127\.0\.1\.1' line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                  - name: Update /etc/hosts
                    lineinfile:  dest=/etc/hosts  line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                roles:
                 - { role: indigo-dc.consul, consul_mode: "agent", consul_bootstrap: 0 }
                 - { role: indigo-dc.mesos, mesos_install_mode: "slave" }
                 - { role: indigo-dc.ams_config, ams_config_node: "wn" }
                #  - { role: Cloud-PG.gateway_config, availability_zone: {get_param: availability_zone} }

  slave_deployment:
    type: OS::Heat::SoftwareDeployments
    depends_on:
      - slave_setup_deployment
    properties:
      config: {get_resource: slave_config}
      servers: {get_attr: [mesos_slaves, attributes, mesos_server_id]}
      input_values:
        htcondor_config_schedd_ip: {get_attr: [mesos_slaveschedd, resource.0, mesos_server_ip]}
        mesos_masters_list: {get_attr: [mesos_masters, mesos_server_ip]}
        zookeeper_peers: {get_attr: [mesos_masters, mesos_server_ip]}
        consul_servers: {get_attr: [mesos_masters, mesos_server_ip]}
        ams_use_local_squid: {get_param: ams_use_local_squid}
        ams_default_squid: {get_param: ams_default_squid}
        ams_default_squid_port: {get_param: ams_default_squid_port}
        ams_repo_server_url: {get_param: ams_repo_server_url}
        ams_repo_public_key_path: {get_param: ams_repo_public_key_path}
        ams_repo_http_proxy: {get_param: ams_repo_http_proxy}
        ams_repo_repository_name: {get_param: ams_repo_repository_name}
        ams_repo_public_key: {get_param: ams_repo_public_key}
        ams_repo_public_key_url: {get_param: ams_repo_public_key_url}


  mesos_slaves:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: number_of_slaves}
      resource_def:
        type: http://10.2.201.99/MircoT/mesos-condor-ams-cluster/raw/master/heat-templates/mesosnode.yaml
        properties:
          server_name: mesos-s%index%
          ssh_key_name: {get_param: ssh_key_name}
          server_image: {get_param: server_image}
          server_flavor: {get_param: slave_flavor}
          availability_zone: {get_param: availability_zone}
          network: {get_param: network}
          security_groups:
               - {get_resource: secgroup_base}
               - {get_resource: secgroup_slaves}
               - {get_resource: secgroup_condor}

########## Slave for the condor schedd

  slaveschedd_setup_deployment:
    type: OS::Heat::SoftwareDeployments
    properties:
      config: {get_resource: ansible_setup_config}
      servers: {get_attr: [mesos_slaveschedd, attributes, mesos_server_id]}
      input_values:
        role_list: "docker,consul,mesos,htcondor_config,ams_config"
        #,gateway_config"

  slaveschedd_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: zookeeper_peers
          type: CommaDelimitedList
        - name: consul_servers
          type: CommaDelimitedList
        - name: htcondor_config_schedd_ip
        - name: mesos_masters_list
        - name: ams_use_local_squid
        - name: ams_default_squid
        - name: ams_default_squid_port
        - name: ams_repo_server_url
        - name: ams_repo_public_key_path
        - name: ams_repo_http_proxy
        - name: ams_repo_repository_name
        - name: ams_repo_public_key
        - name: ams_repo_public_key_url
      config: |
              ---
              - hosts: localhost
                vars:
                  docker_bridge_ip: "172.0.17.1"
                connection: local
                pre_tasks:
                  - name: Fix /etc/hosts
                    lineinfile: dest=/etc/hosts regexp='^127\.0\.1\.1' line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                  - name: Update /etc/hosts
                    lineinfile:  dest=/etc/hosts  line="{{ ansible_default_ipv4.address }}\t{{ansible_fqdn}} {{ ansible_hostname }}"
                roles:
                 - { role: indigo-dc.consul, consul_mode: "agent", consul_bootstrap: 0 }
                 - { role: indigo-dc.mesos, mesos_install_mode: "slave" }
                 - { role: indigo-dc.ams_config, ams_config_node: "wn" }
                #  - { role: Cloud-PG.gateway_config, availability_zone: {get_param: availability_zone} }

  slaveschedd_deployment:
    type: OS::Heat::SoftwareDeployments
    depends_on:
      - slaveschedd_setup_deployment
    properties:
      config: {get_resource: slaveschedd_config}
      servers: {get_attr: [mesos_slaveschedd, attributes, mesos_server_id]}
      input_values:
        zookeeper_peers: {get_attr: [mesos_masters, mesos_server_ip]}
        consul_servers: {get_attr: [mesos_masters, mesos_server_ip]}
        htcondor_config_schedd_ip: {get_attr: [mesos_slaveschedd, resource.0, mesos_server_ip]}
        mesos_masters_list: {get_attr: [mesos_masters, mesos_server_ip]}
        ams_use_local_squid: {get_param: ams_use_local_squid}
        ams_default_squid: {get_param: ams_default_squid}
        ams_default_squid_port: {get_param: ams_default_squid_port}
        ams_repo_server_url: {get_param: ams_repo_server_url}
        ams_repo_public_key_path: {get_param: ams_repo_public_key_path}
        ams_repo_http_proxy: {get_param: ams_repo_http_proxy}
        ams_repo_repository_name: {get_param: ams_repo_repository_name}
        ams_repo_public_key: {get_param: ams_repo_public_key}
        ams_repo_public_key_url: {get_param: ams_repo_public_key_url}

  mesos_slaveschedd:
    type: OS::Heat::ResourceGroup
    properties:
      resource_def:
        type: http://10.2.201.99/MircoT/mesos-condor-ams-cluster/raw/master/heat-templates/mesosscheddnode.yaml
        properties:
          server_name: mesos-condor-schedd
          ssh_key_name: {get_param: ssh_key_name}
          server_image: {get_param: server_image}
          server_flavor: {get_param: slave_flavor}
          availability_zone: {get_param: availability_zone}
          network: {get_param: network}
          security_groups:
               - {get_resource: secgroup_base}
               - {get_resource: secgroup_slaves}
               - {get_resource: secgroup_condor}
               - {get_resource: secgroup_schedd}


outputs:

  mesos_master_ips:
    value: {get_attr: [mesos_masters, mesos_server_ip]}
    description: >
      This is a list of the  addresses of all the Mesos masters.

  mesos_slaves_ips:
    value: {get_attr: [mesos_slaves, mesos_server_ip]}
    description: >
      This is a list of the addresses of all the Mesos slaves

  loadbalancers_vip:
    value: {get_attr: [vip_port, fixed_ips, 0, ip_address]}
    description: >
      This is the Load Balancers Virtual IP 

  cluster_endpoints:
    description: Cluster endpoints
    value:
      "Mesos":
        str_replace:
          params:
            host: { get_attr: [ mesos_masters, resource.0, mesos_server_ip ] }
          template: "http://host:5050"
      "Marathon":
        str_replace:
          params:
            host: { get_attr: [ mesos_masters, resource.0, mesos_server_ip ] }
          template: "https://host:8443"
      "Chronos":
        str_replace:
          params:
            host: { get_attr: [ mesos_masters, resource.0, mesos_server_ip ] }
          template: "https://host:4443"

